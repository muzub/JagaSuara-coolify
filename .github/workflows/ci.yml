name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run lint
      run: npm run lint
    
    - name: Run type check
      run: npm run type-check
    
    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        SERVICE_FQDN_APP: test.example.com
        NEXT_PUBLIC_APP_URL: https://test.example.com

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: jagasuara:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name jagasuara-test -p 3000:3000 \
          -e NODE_ENV=production \
          -e SERVICE_FQDN_APP=test.example.com \
          -e NEXT_PUBLIC_APP_URL=https://test.example.com \
          jagasuara:test
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl --fail http://localhost:3000/api/health || exit 1
        
        # Cleanup
        docker stop jagasuara-test

  coolify-validate:
    runs-on: ubuntu-latest
    needs: docker
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate Coolify configuration
      run: |
        # Check required files exist
        test -f coolify.yaml
        test -f docker-compose.yml
        test -f Dockerfile
        test -f .env.example
        test -f coolify.json
        
        # Validate environment variable usage
        grep -q "SERVICE_FQDN_APP" coolify.yaml
        grep -q "SERVICE_FQDN_APP" docker-compose.yml
        
        echo "âœ… All Coolify configuration files are valid"
